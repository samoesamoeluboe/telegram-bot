import os
import json
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = 6787660091  # –í–∞—à chat_id

with open('responses.json', 'r', encoding='utf-8') as f:
    RESPONSES = json.load(f)

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    menu = RESPONSES["main_menu"]
    keyboard = [
        [button] for row in menu["reply_markup"]["keyboard"]
        for button in row
    ]
    await update.message.reply_text(
        text=menu["text"],
        reply_markup=ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )

async def send_curator_text(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    await update.message.reply_text(
        text=RESPONSES["curator_text"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [[btn] for row in RESPONSES["main_menu"]["reply_markup"]["keyboard"] for btn in row],
            resize_keyboard=True
        )
    )

async def send_video_menu(update: Update, context: CallbackContext) -> None:
    """–ú–µ–Ω—é —Å –≤–∏–¥–µ–æ"""
    menu = RESPONSES["video_menu"]
    buttons = [
        [InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])]
        for row in menu["reply_markup"]["inline_keyboard"]
        for btn in row
    ]
    
    await update.message.reply_text(
        text=menu["text"],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_video_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    try:
        video_data = RESPONSES["videos"][query.data]
        file_id = video_data["video_url"]
        
        caption = (
            f"<b>{video_data['title']}</b>\n\n"
            f"{video_data['description']}\n\n"
            f"<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</i>\n"
            f"{video_data['specs']}"
        )
        
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video=file_id,
            caption=caption,
            parse_mode="HTML"
        )
        
    except KeyError:
        logger.error(f"–í–∏–¥–µ–æ {query.data} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        await query.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await send_video_menu_after_video(query.message.chat_id, context)

async def send_video_menu_after_video(chat_id: int, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ"""
    menu = RESPONSES["video_menu"]
    buttons = [
        [InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])]
        for row in menu["reply_markup"]["inline_keyboard"]
        for btn in row
    ]
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_video_upload(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id"""
    try:
        if update.message.from_user.id != ADMIN_CHAT_ID:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        video = update.message.video
        file_id = video.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Ñ–∞–π–ª
        with open("video_ids.txt", "a", encoding="utf-8") as f:
            f.write(f"{video.file_name or 'no_name'}: {file_id}\n")
        
        await update.message.reply_text(
            f"‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!\n"
            f"‚îú –ò–º—è: {video.file_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            f"‚îú ID: <code>{file_id}</code>\n"
            f"‚îî –†–∞–∑–º–µ—Ä: {video.file_size//1024} KB",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await context.bot.forward_message(
            chat_id=ADMIN_CHAT_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Text("üìú –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π_—Ç–µ–∫—Å—Ç"), send_curator_text))
    application.add_handler(MessageHandler(filters.TEXT & filters.Text("üé¨ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ_–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã"), send_video_menu))
    application.add_handler(CallbackQueryHandler(handle_video_choice))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video_upload))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
